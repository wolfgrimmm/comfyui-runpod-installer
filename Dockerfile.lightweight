# Lightweight ComfyUI Runner - Downloads ComfyUI only when needed
FROM nvidia/cuda:12.4.0-devel-ubuntu22.04

WORKDIR /workspace
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && \
    apt-get install -y python3.10 python3-pip git wget psmisc lsof && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -s /usr/bin/python3 /usr/bin/python

# Install PyTorch and Python packages (but not ComfyUI)
RUN pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124

# Install ComfyUI requirements without installing ComfyUI itself
RUN git clone https://github.com/comfyanonymous/ComfyUI.git /tmp/comfyui-req && \
    pip3 install --no-cache-dir -r /tmp/comfyui-req/requirements.txt && \
    rm -rf /tmp/comfyui-req

# Install additional packages
RUN pip3 install --no-cache-dir \
    onnxruntime-gpu \
    opencv-python \
    accelerate \
    diffusers \
    jupyterlab \
    ipywidgets \
    notebook \
    flask==3.0.0 \
    psutil==5.9.0

# Create app directory
RUN mkdir -p /app

# Copy configuration files
COPY config /app/config

# Copy UI application
COPY ui /app/ui

# Create smart initialization script
RUN cat > /app/init_workspace.sh << 'EOF'
#!/bin/bash
set -e

echo "==================================="
echo "ComfyUI Smart Initialization"
echo "==================================="

# Check if ComfyUI exists
if [ ! -d "/workspace/ComfyUI" ]; then
    echo "üì¶ ComfyUI not found - Installing fresh copy..."
    git clone https://github.com/comfyanonymous/ComfyUI.git /workspace/ComfyUI
    echo "‚úÖ ComfyUI installed"
    
    # Mark installation time
    date +%s > /workspace/.comfyui_installed
else
    echo "‚úÖ ComfyUI found at /workspace/ComfyUI"
    
    # Optional: Update ComfyUI (can be disabled)
    if [ "${COMFYUI_AUTO_UPDATE:-false}" == "true" ]; then
        echo "üîÑ Updating ComfyUI..."
        cd /workspace/ComfyUI
        git pull || echo "‚ö†Ô∏è Could not update (may have local changes)"
    fi
fi

# Install/update baseline custom nodes
if [ -f "/app/config/baseline-nodes.txt" ]; then
    echo "üì¶ Checking baseline custom nodes..."
    while IFS= read -r node || [ -n "$node" ]; do
        # Skip comments and empty lines
        [[ "$node" =~ ^#.*$ ]] && continue
        [[ -z "$node" ]] && continue
        
        # Extract repo name from URL
        repo_name=$(echo "$node" | sed 's/.*\///')
        
        if [ ! -d "/workspace/ComfyUI/custom_nodes/$repo_name" ]; then
            echo "  Installing: $repo_name"
            cd /workspace/ComfyUI/custom_nodes
            if [[ "$node" == *"github.com"* ]]; then
                git clone "$node"
            else
                git clone "https://github.com/$node"
            fi
            
            # Run install script if exists
            if [ -f "$repo_name/install.py" ]; then
                cd "$repo_name"
                python install.py || echo "  ‚ö†Ô∏è Install script failed for $repo_name"
                cd ..
            fi
        else
            echo "  ‚úì $repo_name already installed"
        fi
    done < /app/config/baseline-nodes.txt
fi

# Ensure directory structure
mkdir -p /workspace/models/checkpoints
mkdir -p /workspace/models/clip
mkdir -p /workspace/models/clip_vision
mkdir -p /workspace/models/configs
mkdir -p /workspace/models/controlnet
mkdir -p /workspace/models/diffusers
mkdir -p /workspace/models/embeddings
mkdir -p /workspace/models/gligen
mkdir -p /workspace/models/hypernetworks
mkdir -p /workspace/models/loras
mkdir -p /workspace/models/photomaker
mkdir -p /workspace/models/style_models
mkdir -p /workspace/models/unet
mkdir -p /workspace/models/upscale_models
mkdir -p /workspace/models/vae
mkdir -p /workspace/models/vae_approx
mkdir -p /workspace/output
mkdir -p /workspace/input
mkdir -p /workspace/workflows
mkdir -p /workspace/user_data

# Fix model symlinks (always, in case they broke)
echo "üîó Setting up symlinks..."
rm -rf /workspace/ComfyUI/models
ln -sf /workspace/models /workspace/ComfyUI/models
rm -rf /workspace/ComfyUI/output
rm -rf /workspace/ComfyUI/input
mkdir -p /workspace/ComfyUI/user

echo "‚úÖ Workspace initialization complete!"
echo "==================================="
EOF

RUN chmod +x /app/init_workspace.sh

# Create start script
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
echo "Starting ComfyUI services..."
/app/init_workspace.sh

echo "Starting UI on port 7777..."
cd /app/ui && python app.py &

echo "Starting JupyterLab on port 8888..."
jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root \
    --NotebookApp.token="" --NotebookApp.password="" \
    --NotebookApp.allow_origin="*" --NotebookApp.disable_check_xsrf=True \
    --ServerApp.allow_origin="*" --ServerApp.disable_check_xsrf=True \
    --ServerApp.terminado_settings="shell_command=[\"bash\"]" &

echo "==================================="
echo "‚úÖ Services started:"
echo "   UI: http://localhost:7777"
echo "   JupyterLab: http://localhost:8888"
echo "   ComfyUI: Start via UI"
echo "==================================="

sleep infinity
EOF

RUN chmod +x /app/start.sh

# Create ComfyUI start script
RUN cat > /app/start_comfyui.sh << 'EOF'
#!/bin/bash
# Ensure ComfyUI is installed
/app/init_workspace.sh

# Start ComfyUI
cd /workspace/ComfyUI
python main.py --listen 0.0.0.0 --port 8188
EOF

RUN chmod +x /app/start_comfyui.sh

ENV HF_HOME="/workspace"
ENV COMFYUI_AUTO_UPDATE="false"

EXPOSE 7777 8188 8888
WORKDIR /workspace

CMD ["/app/start.sh"]