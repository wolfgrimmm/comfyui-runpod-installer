# Optimized Multi-stage Dockerfile with smart caching
# Changes to UI/config won't trigger full rebuild

# Stage 1: Base system (rarely changes)
FROM nvidia/cuda:12.4.0-devel-ubuntu22.04 AS base

WORKDIR /workspace
ENV DEBIAN_FRONTEND=noninteractive

# System dependencies (cached unless package list changes)
RUN apt-get update && \
    apt-get install -y \
        python3.10 python3.10-venv python3-pip \
        git wget psmisc lsof curl unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && ln -s /usr/bin/python3 /usr/bin/python

# Install rclone (cached separately)
RUN curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip && \
    unzip rclone-current-linux-amd64.zip && \
    cd rclone-*-linux-amd64 && \
    cp rclone /usr/bin/ && \
    chown root:root /usr/bin/rclone && \
    chmod 755 /usr/bin/rclone && \
    cd .. && \
    rm -rf rclone-*-linux-amd64* && \
    rclone version

# Stage 2: Python packages (optional, for traditional build)
FROM base AS python-packages
ARG INSTALL_PACKAGES=false

# Only install packages if INSTALL_PACKAGES=true
RUN if [ "$INSTALL_PACKAGES" = "true" ]; then \
        pip install --no-cache-dir --upgrade pip wheel setuptools && \
        pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 && \
        git clone --depth 1 https://github.com/comfyanonymous/ComfyUI.git /tmp/comfyui-req && \
        pip install --no-cache-dir -r /tmp/comfyui-req/requirements.txt && \
        rm -rf /tmp/comfyui-req && \
        pip install --no-cache-dir \
            onnxruntime-gpu \
            opencv-python \
            accelerate \
            diffusers \
            jupyterlab \
            ipywidgets \
            notebook \
            flask==3.0.0 \
            psutil==5.9.0 \
            requests==2.31.0 \
            GitPython \
            PyGithub \
            matrix-client==0.4.0 \
            transformers \
            safetensors; \
    else \
        echo "Skipping package installation (will use venv on first run)"; \
    fi

# Stage 3: Application files (changes frequently)
FROM python-packages AS app

# Create directory structure
RUN mkdir -p /app /workspace/models /workspace/output /workspace/input

# Copy scripts first (changes less often than UI)
COPY scripts /app/scripts
RUN chmod +x /app/scripts/*.sh 2>/dev/null || true

# Copy config (changes occasionally)
COPY config /app/config

# Copy UI last (changes most frequently)
COPY ui /app/ui

# Stage 4: Final runtime scripts
FROM app AS final

# Create universal init script (inline to avoid COPY)
RUN cat > /app/init_workspace.sh << 'EOF'
#!/bin/bash
# Universal initialization
if [ -f "/app/scripts/init_universal.sh" ]; then
    exec /app/scripts/init_universal.sh
else
    echo "Error: init_universal.sh not found"
    exit 1
fi
EOF

RUN chmod +x /app/init_workspace.sh

# Create start script
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
echo "Starting ComfyUI..."

# Initialize workspace
/app/init_workspace.sh

# Configure Google Drive
if [ -f "/app/scripts/init_gdrive.sh" ]; then
    /app/scripts/init_gdrive.sh || true
fi

# Activate venv if created
if [ -f "/workspace/venv/bin/activate" ]; then
    source /workspace/venv/bin/activate
fi

# Start services
cd /app/ui && python app.py &
jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root \
    --NotebookApp.token="" --NotebookApp.password="" \
    --NotebookApp.allow_origin="*" --NotebookApp.disable_check_xsrf=True \
    --ServerApp.allow_origin="*" --ServerApp.disable_check_xsrf=True &

echo "Ready on ports 7777 (UI) and 8888 (Jupyter)"
sleep infinity
EOF

RUN chmod +x /app/start.sh

# Create ComfyUI start script
RUN cat > /app/start_comfyui.sh << 'EOF'
#!/bin/bash
/app/init_workspace.sh

if [ -f "/workspace/venv/bin/activate" ]; then
    source /workspace/venv/bin/activate
fi

if [ ! -f "/workspace/ComfyUI/main.py" ]; then
    echo "ERROR: ComfyUI not found"
    exit 1
fi

cd /workspace/ComfyUI
python main.py --listen 0.0.0.0 --port 8188
EOF

RUN chmod +x /app/start_comfyui.sh

# Set environment
ENV HF_HOME="/workspace"
ENV PYTHONUNBUFFERED=1

# Expose ports
EXPOSE 7777 8188 8888

# Set working directory
WORKDIR /workspace

# Start command
CMD ["/app/start.sh"]